// Code generated by "enumer -type=MultiHttpEntryAssertionType,MultiHttpEntryAssertionSubjectVariant,MultiHttpEntryAssertionConditionVariant,MultiHttpEntryVariableType -trimprefix=MultiHttpEntryAssertionType,MultiHttpEntryAssertionSubjectVariant,MultiHttpEntryAssertionConditionVariant,MultiHttpEntryVariableType -transform=upper -output=multihttp_string.go"; DO NOT EDIT.

package synthetic_monitoring

import (
	"fmt"
	"strings"
)

const _MultiHttpEntryAssertionTypeName = "_TEXT_JSON_PATH_VALUE_JSON_PATH_ASSERTION_REGEX_ASSERTION"

var _MultiHttpEntryAssertionTypeIndex = [...]uint8{0, 5, 21, 41, 57}

const _MultiHttpEntryAssertionTypeLowerName = "_text_json_path_value_json_path_assertion_regex_assertion"

func (i MultiHttpEntryAssertionType) String() string {
	if i < 0 || i >= MultiHttpEntryAssertionType(len(_MultiHttpEntryAssertionTypeIndex)-1) {
		return fmt.Sprintf("MultiHttpEntryAssertionType(%d)", i)
	}
	return _MultiHttpEntryAssertionTypeName[_MultiHttpEntryAssertionTypeIndex[i]:_MultiHttpEntryAssertionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MultiHttpEntryAssertionTypeNoOp() {
	var x [1]struct{}
	_ = x[MultiHttpEntryAssertionType_TEXT-(0)]
	_ = x[MultiHttpEntryAssertionType_JSON_PATH_VALUE-(1)]
	_ = x[MultiHttpEntryAssertionType_JSON_PATH_ASSERTION-(2)]
	_ = x[MultiHttpEntryAssertionType_REGEX_ASSERTION-(3)]
}

var _MultiHttpEntryAssertionTypeValues = []MultiHttpEntryAssertionType{MultiHttpEntryAssertionType_TEXT, MultiHttpEntryAssertionType_JSON_PATH_VALUE, MultiHttpEntryAssertionType_JSON_PATH_ASSERTION, MultiHttpEntryAssertionType_REGEX_ASSERTION}

var _MultiHttpEntryAssertionTypeNameToValueMap = map[string]MultiHttpEntryAssertionType{
	_MultiHttpEntryAssertionTypeName[0:5]:        MultiHttpEntryAssertionType_TEXT,
	_MultiHttpEntryAssertionTypeLowerName[0:5]:   MultiHttpEntryAssertionType_TEXT,
	_MultiHttpEntryAssertionTypeName[5:21]:       MultiHttpEntryAssertionType_JSON_PATH_VALUE,
	_MultiHttpEntryAssertionTypeLowerName[5:21]:  MultiHttpEntryAssertionType_JSON_PATH_VALUE,
	_MultiHttpEntryAssertionTypeName[21:41]:      MultiHttpEntryAssertionType_JSON_PATH_ASSERTION,
	_MultiHttpEntryAssertionTypeLowerName[21:41]: MultiHttpEntryAssertionType_JSON_PATH_ASSERTION,
	_MultiHttpEntryAssertionTypeName[41:57]:      MultiHttpEntryAssertionType_REGEX_ASSERTION,
	_MultiHttpEntryAssertionTypeLowerName[41:57]: MultiHttpEntryAssertionType_REGEX_ASSERTION,
}

var _MultiHttpEntryAssertionTypeNames = []string{
	_MultiHttpEntryAssertionTypeName[0:5],
	_MultiHttpEntryAssertionTypeName[5:21],
	_MultiHttpEntryAssertionTypeName[21:41],
	_MultiHttpEntryAssertionTypeName[41:57],
}

// MultiHttpEntryAssertionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MultiHttpEntryAssertionTypeString(s string) (MultiHttpEntryAssertionType, error) {
	if val, ok := _MultiHttpEntryAssertionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MultiHttpEntryAssertionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MultiHttpEntryAssertionType values", s)
}

// MultiHttpEntryAssertionTypeValues returns all values of the enum
func MultiHttpEntryAssertionTypeValues() []MultiHttpEntryAssertionType {
	return _MultiHttpEntryAssertionTypeValues
}

// MultiHttpEntryAssertionTypeStrings returns a slice of all String values of the enum
func MultiHttpEntryAssertionTypeStrings() []string {
	strs := make([]string, len(_MultiHttpEntryAssertionTypeNames))
	copy(strs, _MultiHttpEntryAssertionTypeNames)
	return strs
}

// IsAMultiHttpEntryAssertionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MultiHttpEntryAssertionType) IsAMultiHttpEntryAssertionType() bool {
	for _, v := range _MultiHttpEntryAssertionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

const _MultiHttpEntryAssertionSubjectVariantName = "_DEFAULT_SUBJECT_RESPONSE_HEADERS_HTTP_STATUS_CODE_RESPONSE_BODY"

var _MultiHttpEntryAssertionSubjectVariantIndex = [...]uint8{0, 16, 33, 50, 64}

const _MultiHttpEntryAssertionSubjectVariantLowerName = "_default_subject_response_headers_http_status_code_response_body"

func (i MultiHttpEntryAssertionSubjectVariant) String() string {
	if i < 0 || i >= MultiHttpEntryAssertionSubjectVariant(len(_MultiHttpEntryAssertionSubjectVariantIndex)-1) {
		return fmt.Sprintf("MultiHttpEntryAssertionSubjectVariant(%d)", i)
	}
	return _MultiHttpEntryAssertionSubjectVariantName[_MultiHttpEntryAssertionSubjectVariantIndex[i]:_MultiHttpEntryAssertionSubjectVariantIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MultiHttpEntryAssertionSubjectVariantNoOp() {
	var x [1]struct{}
	_ = x[MultiHttpEntryAssertionSubjectVariant_DEFAULT_SUBJECT-(0)]
	_ = x[MultiHttpEntryAssertionSubjectVariant_RESPONSE_HEADERS-(1)]
	_ = x[MultiHttpEntryAssertionSubjectVariant_HTTP_STATUS_CODE-(2)]
	_ = x[MultiHttpEntryAssertionSubjectVariant_RESPONSE_BODY-(3)]
}

var _MultiHttpEntryAssertionSubjectVariantValues = []MultiHttpEntryAssertionSubjectVariant{MultiHttpEntryAssertionSubjectVariant_DEFAULT_SUBJECT, MultiHttpEntryAssertionSubjectVariant_RESPONSE_HEADERS, MultiHttpEntryAssertionSubjectVariant_HTTP_STATUS_CODE, MultiHttpEntryAssertionSubjectVariant_RESPONSE_BODY}

var _MultiHttpEntryAssertionSubjectVariantNameToValueMap = map[string]MultiHttpEntryAssertionSubjectVariant{
	_MultiHttpEntryAssertionSubjectVariantName[0:16]:       MultiHttpEntryAssertionSubjectVariant_DEFAULT_SUBJECT,
	_MultiHttpEntryAssertionSubjectVariantLowerName[0:16]:  MultiHttpEntryAssertionSubjectVariant_DEFAULT_SUBJECT,
	_MultiHttpEntryAssertionSubjectVariantName[16:33]:      MultiHttpEntryAssertionSubjectVariant_RESPONSE_HEADERS,
	_MultiHttpEntryAssertionSubjectVariantLowerName[16:33]: MultiHttpEntryAssertionSubjectVariant_RESPONSE_HEADERS,
	_MultiHttpEntryAssertionSubjectVariantName[33:50]:      MultiHttpEntryAssertionSubjectVariant_HTTP_STATUS_CODE,
	_MultiHttpEntryAssertionSubjectVariantLowerName[33:50]: MultiHttpEntryAssertionSubjectVariant_HTTP_STATUS_CODE,
	_MultiHttpEntryAssertionSubjectVariantName[50:64]:      MultiHttpEntryAssertionSubjectVariant_RESPONSE_BODY,
	_MultiHttpEntryAssertionSubjectVariantLowerName[50:64]: MultiHttpEntryAssertionSubjectVariant_RESPONSE_BODY,
}

var _MultiHttpEntryAssertionSubjectVariantNames = []string{
	_MultiHttpEntryAssertionSubjectVariantName[0:16],
	_MultiHttpEntryAssertionSubjectVariantName[16:33],
	_MultiHttpEntryAssertionSubjectVariantName[33:50],
	_MultiHttpEntryAssertionSubjectVariantName[50:64],
}

// MultiHttpEntryAssertionSubjectVariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MultiHttpEntryAssertionSubjectVariantString(s string) (MultiHttpEntryAssertionSubjectVariant, error) {
	if val, ok := _MultiHttpEntryAssertionSubjectVariantNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MultiHttpEntryAssertionSubjectVariantNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MultiHttpEntryAssertionSubjectVariant values", s)
}

// MultiHttpEntryAssertionSubjectVariantValues returns all values of the enum
func MultiHttpEntryAssertionSubjectVariantValues() []MultiHttpEntryAssertionSubjectVariant {
	return _MultiHttpEntryAssertionSubjectVariantValues
}

// MultiHttpEntryAssertionSubjectVariantStrings returns a slice of all String values of the enum
func MultiHttpEntryAssertionSubjectVariantStrings() []string {
	strs := make([]string, len(_MultiHttpEntryAssertionSubjectVariantNames))
	copy(strs, _MultiHttpEntryAssertionSubjectVariantNames)
	return strs
}

// IsAMultiHttpEntryAssertionSubjectVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MultiHttpEntryAssertionSubjectVariant) IsAMultiHttpEntryAssertionSubjectVariant() bool {
	for _, v := range _MultiHttpEntryAssertionSubjectVariantValues {
		if i == v {
			return true
		}
	}
	return false
}

const _MultiHttpEntryAssertionConditionVariantName = "_DEFAULT_CONDITION_NOT_CONTAINS_EQUALS_STARTS_WITH_ENDS_WITH_TYPE_OF_CONTAINS"

var _MultiHttpEntryAssertionConditionVariantIndex = [...]uint8{0, 18, 31, 38, 50, 60, 68, 77}

const _MultiHttpEntryAssertionConditionVariantLowerName = "_default_condition_not_contains_equals_starts_with_ends_with_type_of_contains"

func (i MultiHttpEntryAssertionConditionVariant) String() string {
	if i < 0 || i >= MultiHttpEntryAssertionConditionVariant(len(_MultiHttpEntryAssertionConditionVariantIndex)-1) {
		return fmt.Sprintf("MultiHttpEntryAssertionConditionVariant(%d)", i)
	}
	return _MultiHttpEntryAssertionConditionVariantName[_MultiHttpEntryAssertionConditionVariantIndex[i]:_MultiHttpEntryAssertionConditionVariantIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MultiHttpEntryAssertionConditionVariantNoOp() {
	var x [1]struct{}
	_ = x[MultiHttpEntryAssertionConditionVariant_DEFAULT_CONDITION-(0)]
	_ = x[MultiHttpEntryAssertionConditionVariant_NOT_CONTAINS-(1)]
	_ = x[MultiHttpEntryAssertionConditionVariant_EQUALS-(2)]
	_ = x[MultiHttpEntryAssertionConditionVariant_STARTS_WITH-(3)]
	_ = x[MultiHttpEntryAssertionConditionVariant_ENDS_WITH-(4)]
	_ = x[MultiHttpEntryAssertionConditionVariant_TYPE_OF-(5)]
	_ = x[MultiHttpEntryAssertionConditionVariant_CONTAINS-(6)]
}

var _MultiHttpEntryAssertionConditionVariantValues = []MultiHttpEntryAssertionConditionVariant{MultiHttpEntryAssertionConditionVariant_DEFAULT_CONDITION, MultiHttpEntryAssertionConditionVariant_NOT_CONTAINS, MultiHttpEntryAssertionConditionVariant_EQUALS, MultiHttpEntryAssertionConditionVariant_STARTS_WITH, MultiHttpEntryAssertionConditionVariant_ENDS_WITH, MultiHttpEntryAssertionConditionVariant_TYPE_OF, MultiHttpEntryAssertionConditionVariant_CONTAINS}

var _MultiHttpEntryAssertionConditionVariantNameToValueMap = map[string]MultiHttpEntryAssertionConditionVariant{
	_MultiHttpEntryAssertionConditionVariantName[0:18]:       MultiHttpEntryAssertionConditionVariant_DEFAULT_CONDITION,
	_MultiHttpEntryAssertionConditionVariantLowerName[0:18]:  MultiHttpEntryAssertionConditionVariant_DEFAULT_CONDITION,
	_MultiHttpEntryAssertionConditionVariantName[18:31]:      MultiHttpEntryAssertionConditionVariant_NOT_CONTAINS,
	_MultiHttpEntryAssertionConditionVariantLowerName[18:31]: MultiHttpEntryAssertionConditionVariant_NOT_CONTAINS,
	_MultiHttpEntryAssertionConditionVariantName[31:38]:      MultiHttpEntryAssertionConditionVariant_EQUALS,
	_MultiHttpEntryAssertionConditionVariantLowerName[31:38]: MultiHttpEntryAssertionConditionVariant_EQUALS,
	_MultiHttpEntryAssertionConditionVariantName[38:50]:      MultiHttpEntryAssertionConditionVariant_STARTS_WITH,
	_MultiHttpEntryAssertionConditionVariantLowerName[38:50]: MultiHttpEntryAssertionConditionVariant_STARTS_WITH,
	_MultiHttpEntryAssertionConditionVariantName[50:60]:      MultiHttpEntryAssertionConditionVariant_ENDS_WITH,
	_MultiHttpEntryAssertionConditionVariantLowerName[50:60]: MultiHttpEntryAssertionConditionVariant_ENDS_WITH,
	_MultiHttpEntryAssertionConditionVariantName[60:68]:      MultiHttpEntryAssertionConditionVariant_TYPE_OF,
	_MultiHttpEntryAssertionConditionVariantLowerName[60:68]: MultiHttpEntryAssertionConditionVariant_TYPE_OF,
	_MultiHttpEntryAssertionConditionVariantName[68:77]:      MultiHttpEntryAssertionConditionVariant_CONTAINS,
	_MultiHttpEntryAssertionConditionVariantLowerName[68:77]: MultiHttpEntryAssertionConditionVariant_CONTAINS,
}

var _MultiHttpEntryAssertionConditionVariantNames = []string{
	_MultiHttpEntryAssertionConditionVariantName[0:18],
	_MultiHttpEntryAssertionConditionVariantName[18:31],
	_MultiHttpEntryAssertionConditionVariantName[31:38],
	_MultiHttpEntryAssertionConditionVariantName[38:50],
	_MultiHttpEntryAssertionConditionVariantName[50:60],
	_MultiHttpEntryAssertionConditionVariantName[60:68],
	_MultiHttpEntryAssertionConditionVariantName[68:77],
}

// MultiHttpEntryAssertionConditionVariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MultiHttpEntryAssertionConditionVariantString(s string) (MultiHttpEntryAssertionConditionVariant, error) {
	if val, ok := _MultiHttpEntryAssertionConditionVariantNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MultiHttpEntryAssertionConditionVariantNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MultiHttpEntryAssertionConditionVariant values", s)
}

// MultiHttpEntryAssertionConditionVariantValues returns all values of the enum
func MultiHttpEntryAssertionConditionVariantValues() []MultiHttpEntryAssertionConditionVariant {
	return _MultiHttpEntryAssertionConditionVariantValues
}

// MultiHttpEntryAssertionConditionVariantStrings returns a slice of all String values of the enum
func MultiHttpEntryAssertionConditionVariantStrings() []string {
	strs := make([]string, len(_MultiHttpEntryAssertionConditionVariantNames))
	copy(strs, _MultiHttpEntryAssertionConditionVariantNames)
	return strs
}

// IsAMultiHttpEntryAssertionConditionVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MultiHttpEntryAssertionConditionVariant) IsAMultiHttpEntryAssertionConditionVariant() bool {
	for _, v := range _MultiHttpEntryAssertionConditionVariantValues {
		if i == v {
			return true
		}
	}
	return false
}

const _MultiHttpEntryVariableTypeName = "_JSON_PATH_REGEX_CSS_SELECTOR"

var _MultiHttpEntryVariableTypeIndex = [...]uint8{0, 10, 16, 29}

const _MultiHttpEntryVariableTypeLowerName = "_json_path_regex_css_selector"

func (i MultiHttpEntryVariableType) String() string {
	if i < 0 || i >= MultiHttpEntryVariableType(len(_MultiHttpEntryVariableTypeIndex)-1) {
		return fmt.Sprintf("MultiHttpEntryVariableType(%d)", i)
	}
	return _MultiHttpEntryVariableTypeName[_MultiHttpEntryVariableTypeIndex[i]:_MultiHttpEntryVariableTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MultiHttpEntryVariableTypeNoOp() {
	var x [1]struct{}
	_ = x[MultiHttpEntryVariableType_JSON_PATH-(0)]
	_ = x[MultiHttpEntryVariableType_REGEX-(1)]
	_ = x[MultiHttpEntryVariableType_CSS_SELECTOR-(2)]
}

var _MultiHttpEntryVariableTypeValues = []MultiHttpEntryVariableType{MultiHttpEntryVariableType_JSON_PATH, MultiHttpEntryVariableType_REGEX, MultiHttpEntryVariableType_CSS_SELECTOR}

var _MultiHttpEntryVariableTypeNameToValueMap = map[string]MultiHttpEntryVariableType{
	_MultiHttpEntryVariableTypeName[0:10]:       MultiHttpEntryVariableType_JSON_PATH,
	_MultiHttpEntryVariableTypeLowerName[0:10]:  MultiHttpEntryVariableType_JSON_PATH,
	_MultiHttpEntryVariableTypeName[10:16]:      MultiHttpEntryVariableType_REGEX,
	_MultiHttpEntryVariableTypeLowerName[10:16]: MultiHttpEntryVariableType_REGEX,
	_MultiHttpEntryVariableTypeName[16:29]:      MultiHttpEntryVariableType_CSS_SELECTOR,
	_MultiHttpEntryVariableTypeLowerName[16:29]: MultiHttpEntryVariableType_CSS_SELECTOR,
}

var _MultiHttpEntryVariableTypeNames = []string{
	_MultiHttpEntryVariableTypeName[0:10],
	_MultiHttpEntryVariableTypeName[10:16],
	_MultiHttpEntryVariableTypeName[16:29],
}

// MultiHttpEntryVariableTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MultiHttpEntryVariableTypeString(s string) (MultiHttpEntryVariableType, error) {
	if val, ok := _MultiHttpEntryVariableTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MultiHttpEntryVariableTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MultiHttpEntryVariableType values", s)
}

// MultiHttpEntryVariableTypeValues returns all values of the enum
func MultiHttpEntryVariableTypeValues() []MultiHttpEntryVariableType {
	return _MultiHttpEntryVariableTypeValues
}

// MultiHttpEntryVariableTypeStrings returns a slice of all String values of the enum
func MultiHttpEntryVariableTypeStrings() []string {
	strs := make([]string, len(_MultiHttpEntryVariableTypeNames))
	copy(strs, _MultiHttpEntryVariableTypeNames)
	return strs
}

// IsAMultiHttpEntryVariableType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MultiHttpEntryVariableType) IsAMultiHttpEntryVariableType() bool {
	for _, v := range _MultiHttpEntryVariableTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
