// Copyright 2020 Grafana Labs
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package worldping;

option go_package = "worldping";

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Checks {
	// RegisterProbe causes this probe to be reported as online with
	// worldping-api.
	//
	// The probe is identified via an authentication token provided
	// in a different channel by worldping-api.
	rpc RegisterProbe(Void) returns (RegisterProbeResult) {};

	// GetChanges returns a list of check operations, specifying
	// whether to add, update or delete checks.
	rpc GetChanges(Void) returns (stream CheckChanges) {};
}

// Void is an empty message used by RPC methods that don't take
// arguments.
message Void {
}

enum StatusCode {
	OK               = 0;
	NOT_FOUND        = 1;
	INVALID_ARGUMENT = 2;
	ALREADY_EXISTS   = 3;
	INTERNAL_ERROR   = 4;
	NOT_AUTHORIZED   = 5;
}

message Status {
	StatusCode code    = 1;
	string     message = 2;
}

message RegisterProbeResult {
	Probe  probe  = 1 [(gogoproto.nullable) = false];
	Status status = 2 [(gogoproto.nullable) = false];
}

// Probe represents a probe
message Probe {
	int64          id        = 1 [(gogoproto.jsontag) = "id"];                                   // ID of the probe, assigned by the API
	int64          tenantId  = 2 [(gogoproto.jsontag) = "tenantId"];                             // ID of the worldping tenant this probe belongs to
	string         name      = 3 [(gogoproto.jsontag) = "name"];                                 // name of the probe
	float          latitude  = 4 [(gogoproto.jsontag) = "latitude"];                             // latitude of the probe
	float          longitude = 5 [(gogoproto.jsontag) = "longitude"];                            // longitude of the probe
	repeated Label labels    = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "labels"]; // probe-specific labels applied to all metrics and events
}

service Tenants {
	// GetTenant returns the details of the specified tenant
	rpc GetTenant(TenantInfo) returns (Tenant) {};
}

message TenantInfo {
	int64 id = 1;
}

// Tenant represents a user of worldping
message Tenant {
	int64           id            = 1   [(gogoproto.jsontag) = "id"];            // unique ID
	int64           orgId         = 2   [(gogoproto.jsontag) = "orgId"];         // grafana.com orgId
	RemoteInfo      metricsRemote = 3   [(gogoproto.jsontag) = "metricsRemote"]; // target to send metrics to
	RemoteInfo      eventsRemote  = 4   [(gogoproto.jsontag) = "eventsRemote"];  // target to send events to

	double          created       = 100 [(gogoproto.jsontag) = "created"];       // time the check was created
	double          modified      = 101 [(gogoproto.jsontag) = "modified"];      // last time modified
}

// RemoteInfo represents a target to send metrics or events to
message RemoteInfo {
	string name     = 1 [(gogoproto.jsontag) = "name"];     // instance name
	string url      = 2 [(gogoproto.jsontag) = "url"];      // instance URL
	string username = 3 [(gogoproto.jsontag) = "username"]; // username (instanceId)
	string password = 4 [(gogoproto.jsontag) = "password"]; // password (publisher API key)
}

enum CheckOperation {
	CHECK_ADD    = 0;
	CHECK_UPDATE = 1;
	CHECK_DELETE = 2;
}

message CheckChange {
	CheckOperation operation = 1;
	Check          check     = 2 [(gogoproto.nullable) = false];
}

// CheckChanges represents a series of check changes.
//
// This exists in order to support the initialization phase of the
// probe's connection: when a probe connects, it will get a sequence of
// changes describing all the checks associated to that probe. After
// that, it will get one change (add, delete, update) at a time.
message CheckChanges {
	repeated CheckChange changes = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "changes"];
}

message Label {
	string name  = 1 [(gogoproto.jsontag) = "name"];
	string value = 2 [(gogoproto.jsontag) = "value"];
}

// Check represents a check.
//
// The "settings" field defines the type of check.
message Check {
	int64           id        = 1   [(gogoproto.jsontag) = "id"];                                     // unique ID
	int64           tenantId  = 2   [(gogoproto.jsontag) = "tenantId"];                               // Worldping tenant
	int64           frequency = 3   [(gogoproto.jsontag) = "frequency"];                              // every X milliseconds
	int64           offset    = 4   [(gogoproto.jsontag) = "offset"];                                 // ??? REMOVE???? ??? why user configured?
	int64           timeout   = 5   [(gogoproto.jsontag) = "timeout"];                                // maximum time before aborting
	bool            enabled   = 6   [(gogoproto.jsontag) = "enabled"];                                // user enable/disable   
	repeated Label  labels    = 7   [(gogoproto.nullable) = false, (gogoproto.jsontag) = "labels"];   // Custom labels applied to all metrics and events (ie: production)
	CheckSettings   settings  = 8   [(gogoproto.nullable) = false, (gogoproto.jsontag) = "settings"];
	repeated int64  probes    = 9   [(gogoproto.jsontag) = "probes"];                                 // list of probes where this check should run
	string          target    = 10  [(gogoproto.jsontag) = "target"];                                 // endpoint that this check is targeting
	string          job       = 11  [(gogoproto.jsontag) = "job"];                                    // name of job this check belongs to

	double          created   = 100 [(gogoproto.jsontag) = "created"];                                // time the check was created
	double          modified  = 101 [(gogoproto.jsontag) = "modified"];                               // last time modified
}

// CheckSettings provides the settings for exactly one type of check.
message CheckSettings {
	option (gogoproto.onlyone) = true;
	PingSettings ping = 1 [(gogoproto.jsontag) = "ping,omitempty"];
	HttpSettings http = 2 [(gogoproto.jsontag) = "http,omitempty"];
	DnsSettings  dns  = 3 [(gogoproto.jsontag) = "dns,omitempty"];
	TcpSettings  tcp  = 4 [(gogoproto.jsontag) = "tcp,omitempty"];
}

// PingSettings provides the settings for a ping check.
//
// "hostname" is the hostname to check.
// "ipVersion" is the IP version to use in the IP layer.
message PingSettings {
	IpVersion  ipVersion       = 1 [(gogoproto.jsontag) = "ipVersion"];
	string     sourceIpAddress = 2 [(gogoproto.jsontag) = "sourceIpAddress,omitempty"];
	int64      payloadSize     = 3 [(gogoproto.jsontag) = "payloadSize,omitempty"];
	bool       dontFragment    = 4 [(gogoproto.jsontag) = "dontFragment"];
}

enum HttpMethod {
	GET     = 0;
	CONNECT = 1;
	DELETE  = 2;
	HEAD    = 3;
	OPTIONS = 4;
	POST    = 5;
	PUT     = 6;
	TRACE   = 7;
}

// HttpSettings provides the settings for a HTTP check.
message HttpSettings {
	IpVersion             ipVersion                    = 1  [(gogoproto.jsontag) = "ipVersion"];
	HttpMethod            method                       = 2  [(gogoproto.jsontag) = "method"];
	repeated string       headers                      = 3  [(gogoproto.jsontag) = "headers,omitempty"];
	string                body                         = 4  [(gogoproto.jsontag) = "body,omitempty"];
	bool                  noFollowRedirects            = 5  [(gogoproto.jsontag) = "noFollowRedirects"];

	// client config

	TLSConfig             tlsConfig                    = 100  [(gogoproto.jsontag) = "tlsConfig,omitempty"];
	BasicAuth             basicAuth                    = 101  [(gogoproto.jsontag) = "basicAuth,omitempty"];
	string                bearerToken                  = 102  [(gogoproto.jsontag) = "bearerToken,omitempty"];
	string                proxyURL                     = 103  [(gogoproto.jsontag) = "proxyURL,omitempty"];

	// validations

	bool                  failIfSSL                    = 200 [(gogoproto.jsontag) = "failIfSSL"];
	bool                  failIfNotSSL                 = 201 [(gogoproto.jsontag) = "failIfNotSSL"];
	repeated int32        validStatusCodes             = 202 [(gogoproto.jsontag) = "validStatusCodes,omitempty"];
	repeated string       validHTTPVersions            = 203 [(gogoproto.jsontag) = "validHTTPVersions,omitempty"];
	repeated string       failIfBodyMatchesRegexp      = 204 [(gogoproto.jsontag) = "failIfBodyMatchesRegexp,omitempty"];
	repeated string       failIfBodyNotMatchesRegexp   = 205 [(gogoproto.jsontag) = "failIfBodyNotMatchesRegexp,omitempty"];
	repeated HeaderMatch  failIfHeaderMatchesRegexp    = 206 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "failIfHeaderMatchesRegexp,omitempty"];
	repeated HeaderMatch  failIfHeaderNotMatchesRegexp = 207 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "failIfHeaderNotMatchesRegexp,omitempty"];

	// custom settings not present in blackbox-exporter

	string                cacheBustingQueryParamName   = 900 [(gogoproto.jsontag) = "cacheBustingQueryParamName,omitempty"];
}

message HeaderMatch {
	string header       = 1 [(gogoproto.jsontag) = "header,omitempty"];
	string regexp       = 2 [(gogoproto.jsontag) = "regexp,omitempty"];
	bool   allowMissing = 3 [(gogoproto.jsontag) = "allowMissing,omitempty"];
}

enum DnsRecordType {
	ANY   = 0;
	A     = 1;
	AAAA  = 2;
	CNAME = 3;
	MX    = 4;
	NS    = 5;
	PTR   = 6;
	SOA   = 7;
	SRV   = 8;
	TXT   = 9;
}

enum DnsProtocol {
	TCP = 0;
	UDP = 1;
}

message DNSRRValidator {
	repeated string failIfMatchesRegexp    = 1 [(gogoproto.jsontag) = "failIfMatchesRegexp,omitempty"];
	repeated string failIfNotMatchesRegexp = 2 [(gogoproto.jsontag) = "failIfNotMatchesRegexp,omitempty"];
}

// DnsSettings provides the settings for a DNS check.
//
// The way blackbox-exporter works, a DNS check tests a _server_, so the
// _target_ of the check is a server address, and the check itself
// contains the record to check.
message DnsSettings {
	IpVersion        ipVersion          = 1  [(gogoproto.jsontag) = "ipVersion"];
	string           sourceIpAddress    = 2  [(gogoproto.jsontag) = "sourceIpAddress,omitempty"];
	string           server             = 3  [(gogoproto.jsontag) = "server"];
	int32            port               = 4  [(gogoproto.jsontag) = "port"];
	DnsRecordType    recordType         = 5  [(gogoproto.jsontag) = "recordType"];
	DnsProtocol      protocol           = 6  [(gogoproto.jsontag) = "protocol"];

	// validations

	repeated string  validRCodes        = 200 [(gogoproto.jsontag) = "validRCodes,omitempty"];
	DNSRRValidator   validateAnswer     = 201 [(gogoproto.jsontag) = "validateAnswerRRS,omitempty"];
	DNSRRValidator   validateAuthority  = 202 [(gogoproto.jsontag) = "validateAuthorityRRS,omitempty"];
	DNSRRValidator   validateAdditional = 203 [(gogoproto.jsontag) = "validateAditionalRRS,omitempty"];
}

// TcpSettings provides the settings for a TCP check.
//
// "ipVersion" is the IP version to use in the IP layer.
message TcpSettings {
	IpVersion                 ipVersion       = 1 [(gogoproto.jsontag) = "ipVersion"];
	string                    sourceIpAddress = 2 [(gogoproto.jsontag) = "sourceIpAddress,omitempty"];
	bool                      tls             = 3 [(gogoproto.jsontag) = "tls,omitempty"];
	TLSConfig                 tlsConfig       = 4 [(gogoproto.jsontag) = "tlsConfig,omitempty"];
	repeated TCPQueryResponse queryResponse   = 5 [(gogoproto.jsontag) = "queryResponse,omitempty", (gogoproto.nullable) = false];
}

message TCPQueryResponse {
	bytes send     = 1 [(gogoproto.jsontag) = "send"];
	bytes expect   = 2 [(gogoproto.jsontag) = "expect"];
	bool  startTLS = 3 [(gogoproto.jsontag) = "startTLS,omitempty"];
}

enum IpVersion {
	Any = 0;
	V4  = 1;
	V6  = 2;
}

message TLSConfig {
	bool   insecureSkipVerify = 1 [(gogoproto.jsontag) = "insecureSkipVerify,omitempty"];
	bytes  CACert             = 2 [(gogoproto.jsontag) = "caCert,omitempty"];
	bytes  clientCert         = 3 [(gogoproto.jsontag) = "clientCert,omitempty"];
	bytes  clientKey          = 4 [(gogoproto.jsontag) = "clientKey,omitempty"];
	string serverName         = 5 [(gogoproto.jsontag) = "serverName,omitempty"];
}

message BasicAuth {
	string username = 1 [(gogoproto.jsontag) = "username,omitempty"];
	string password = 2 [(gogoproto.jsontag) = "password,omitempty"];
}
