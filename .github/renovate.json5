{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:best-practices",
    ":semanticCommitsDisabled"
  ],

  "branchPrefix": "grafanarenovatebot/",
  // Used when renovate runs as a github app.
  // https://docs.renovatebot.com/configuration-options/#platformcommit
  // Setting platformCommit to `true`, as required by Grafana policy, seems to make renovate think all PRs are modified,
  // as the dynamic author configured by github does not match the author set in `gitAuthor`. It is recommended to
  // leave it unset: https://github.com/renovatebot/renovate/discussions/29106.
  "platformCommit": true,
  "dependencyDashboard": false,
  "forkProcessing": "disabled",
  "labels": ["dependencies"],

  "postUpdateOptions": [
    "gomodTidyE"
  ],

  "packageRules" : [
    {
      // Non-versioned go modules are noisy, with almost daily updates. We throttle them a bit.
      "matchManagers": ["gomod"],
      "matchUpdateTypes": ["digest"],
      "schedule": "before 8am on monday every 2 weeks",
    },
    {
      // Group prometheus-go updates, so prometheus-common is in sync with client-go.
      "matchManagers": ["gomod"],
      "matchPackageNames": "github.com/prometheus/*",
      "groupName": "prometheus-go"
    },
  ],

  "customManagers": [
    {
      // Update k6 version in Dockerfiles.
      "customType": "regex",
      "datasourceTemplate": "github-releases",
      "depNameTemplate": "grafana/k6",
      "fileMatch": [".*\\.mk"],
      "matchStrings": [
        "(?:^|\\n)[ \\t]*K6_VERSION\\s*:=\\s*(?<currentValue>\\S+)[ \\t]*(?:$|\\n)"
      ]
    },
    {
      // Update grafana-build-tools tags across the repository.
      "customType": "regex",
      "depNameTemplate": "ghcr.io/grafana/grafana-build-tools",
      "datasourceTemplate": "docker",
      "versioningTemplate": "semver",
      "fileMatch": [
        "^\\.github/workflows/.*\\.ya?ml$",
        "(^|/)Makefile$",
        ".*\\.jsonnet$",
        ".*\\.mk$"
      ],
      "matchStrings": [
        "ghcr.io/grafana/grafana-build-tools:(?<currentValue>[\\w-+.]+)"
      ]
    },
    {
      // Update pinned alpine packages in Dockerfile.
      "customType": "regex",
      "fileMatch": [ "Dockerfile" ],
      "matchStrings": [
        // Lines that loosely look like "apk add --repository community something=version".
        // To keep this regex simple, only one package per "apk add" is supported.
        "\\bapk\\b.+?\\badd\\b.+?(--repository|-X)[ =\\t]+(?<alpineRepo>[a-z]+)\\s+(?<depName>[-\\w]+?)=(?<currentValue>[-.\\w]+)"
      ],
      "versioningTemplate": "loose", // The most lenient versioning renovate supports.
      // We use two different datasources for main and community, as alpine serves them in different URLs.
      "datasourceTemplate": "custom.alpine-{{alpineRepo}}",
      // Extracted "versions" include the package name, so here we strip that prefix using a regex.
      "extractVersionTemplate": "{{depName}}-(?<version>.+).apk",
    },
    {
      // Update renovate version in GHA workflow file.
      "customType": "regex",
      "depNameTemplate": "ghcr.io/renovatebot/renovate",
      "datasourceTemplate": "docker",
      "fileMatch": [
        "^\\.github/workflows/.*\\.ya?ml$",
      ],
      "matchStrings": [
        "renovate-version: (?<currentValue>[^@\\s]+)(?:@(?<currentDigest>\\S+))?",
        "RENOVATE_IMAGE=ghcr.io/renovatebot/renovate:(?<currentValue>[^@\\s]+)(?:@(?<currentDigest>\\S+))?"
      ]
    }
  ],
  "customDatasources": {
    // Use alpine HTML mirror page as a repository. When using `html` format, renovate produces version strings from
    // all links present in the page. The version is extracted from that using extractVersionTemplate above.
    "alpine-main": {
      "defaultRegistryUrlTemplate": "https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/x86_64/",
      "format": "html",
    },
    "alpine-community": {
      "defaultRegistryUrlTemplate": "https://dl-cdn.alpinelinux.org/alpine/latest-stable/community/x86_64/",
      "format": "html",
    },
  },
}
